#!/usr/bin/env python
""" This module produces the graphs about the RESTUD economies.
"""

# standard library
import numpy as np

import sys
import os

np.random.seed(123)
import respy

sys.path.insert(0, '../_modules')
from auxiliary_samples import get_choice_probabilities
from auxiliary_samples import plot_return_experience
from auxiliary_samples import plot_return_education
from auxiliary_samples import return_to_experience
from auxiliary_samples import plot_choice_patterns
from auxiliary_samples import return_to_education
from auxiliary_samples import prepare_directories

# module-wide variables
HOME = os.path.dirname(os.path.realpath(__file__))
SPECS = ['one', 'two', 'three']
SPEC_DIR = '../../../example/'

if __name__ == '__main__':

    # Cleanup results from a previous run and prepare the directory structure
    # for the different results.
    prepare_directories(SPECS)

    # Determine choice patterns over time by simulating the samples and
    # processing the summary information about the dataset.
    for spec in SPECS:
        respy_obj = respy.RespyCls(SPEC_DIR + 'kw_data_' + spec + '.ini')

        os.chdir('rslts/data_' + spec)
        respy.simulate(respy_obj)

        choice_probabilities = get_choice_probabilities('data.respy.info')
        plot_choice_patterns(choice_probabilities, spec)
        os.chdir(HOME)

    # Process the initialization files and obtaining the parameters of the
    # reward function that determine the returns to experience and education.
    coeffs = {}
    for spec in SPECS:
        respy_obj = respy.RespyCls(SPEC_DIR + 'kw_data_' + spec + '.ini')
        model_paras = respy_obj.get_attr('model_paras')

        coeffs[spec] = dict()
        for label in ['a', 'b']:
            coeffs[spec][label] = model_paras['coeffs_' + label]

    # Determine wages for varying level of experience in each occupation.
    for spec in SPECS:
        z = dict()
        for which in ['a', 'b']:
            x, y = np.meshgrid(range(20), range(20))
            z[which] = np.tile(np.nan, (20, 20))
            for i in range(20):
                for j in range(20):
                    args = [i, j, coeffs[spec], which]
                    z[which][i, j] = return_to_experience(*args)
        plot_return_experience(x, y, z, spec)

    # Determine wages for varying years of education in each occupation.
    for spec in SPECS:
        xvals, yvals = range(10, 21), dict()
        for which in ['a', 'b']:
            yvals[which] = []
            for edu in xvals:
                yvals[which] += [return_to_education(edu, coeffs[spec], which)]
        plot_return_education(xvals, yvals, spec)


