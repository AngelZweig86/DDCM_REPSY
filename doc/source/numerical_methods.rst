.. _implementation:

Numerical Methods
-----------------

The **respy** package contains several numerical components, we discuss each in turn.

Differentiation
"""""""""""""""

We use a forward finite difference approximation for all derivatives. The step-size can be controlled in the *DERIVATIVES* section of the initialization file. This is relevant for the scaling procedure and used by the derivative-based optimization algorithms.

Integration
"""""""""""

All integrals are approximated by Monte Carlo integration. The solution and estimation of the model give rise to two types of integrals.

* The calculation of the **EMAX** at each state requires the evaluation of a four dimensional integral. The integral is evaluated using the number of draws specified in the *ESTIMATION* section of the initialization file. The same random draws are used for each of these integrals.

* For each agent in each time period, the evaluation of the **choice probabilities** requires the approximation of a four-dimensional integral. The integral is evaluated using the number of draws specified in the *SIMULATION* section of the initialization file. The same random draws are used for each of these integrals.

Optimization
""""""""""""

The model is estimated using simulated maximum likelihood estimation (Albright, 1977). The available optimizers depend on the version of the program. If you use the *Python* implementation, then the Powell and BFGS algorithms are available through their **SciPy** implementations. See the `SciPy  Documentation <http://docs.scipy.org>`_ for details. For the *FORTRAN*  implementation, we provide the `BFGS <https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm>`_ and `NEWUOA <https://en.wikipedia.org/wiki/NEWUOA>`_ (Powell, 2004) algorithms.

Function Approximation
""""""""""""""""""""""

The details for the **EMAX interpolation** are discussed in :ref:`Eisenhauer (2016) <bibSection>`.

Function Smoothing
""""""""""""""""""

With only a finite number of draws there is the risk that there are cells with zero probability, so I use kernel smoothed frequency simulation. The function that was used was the kernel smoothing function described in McFadden (1989) with a window parameter of 500. The window parameter is set in the *ESTIMATION* section of the initialization file.

Miscellaneous
"""""""""""""

All numerical linear algebra is done with the `LAPACK <http://www.netlib.org/lapack>`_ library. The pseudorandom number generation differs between the *Python* and *Fortran* implementations. While they are generated by the Mersenne Twister (Matsumoto, 1998) in *Python*, we rely on the George Marsaglia's KISS generator (Marsaglia, 1968) in *Fortran*.
