#!/usr/bin/env python

# standard library
import fnmatch
import shutil
import pytest
import sys
import os

top = '.'
out = '.bld'

# Check for Python 3
if not (sys.version_info[0] == 3):
    raise AssertionError('Please use Python 3')


def options(opt):

    opt.load('compiler_c')

    opt.load('compiler_fc')

    opt.add_option('--test', action='store_true', dest='is_test',
                   default=False, help='run test battery')

    opt.add_option('--debug', action='store_true', dest='is_debug',
                   default=False, help='use debug compiler options')


def configure(conf):

    # Construct environment variables
    conf.env.project_paths = dict()

    conf.env.project_paths['ROBUPY'] = os.getcwd()

    conf.load('compiler_fc')


def build(bld):

    is_test = bld.options.is_test

    # Start from a clean slate
    cleanup_build(True)

    # Initialize directory structure
    bld.recurse("fortran")

    if is_test:
        bld.add_post_fun(post)


def distclean(bld):
    cleanup_build()


def post(bld):
    """ Run test battery after compilation.
    """
    os.chdir(bld.env.project_paths['ROBUPY'] + '/tests')

    pytest.main([])


def cleanup_build(is_build=False):
    """ This function deletes all nuisance files from the package
    """

    # Collect all candidates files and directories.
    matches = []
    for root, dirnames, filenames in os.walk('.'):
        for filename in fnmatch.filter(filenames, '*'):
            matches.append(os.path.join(root, filename))
        for filename in fnmatch.filter(filenames, '.*'):
            matches.append(os.path.join(root, filename))
        for dirname in fnmatch.filter(dirnames, '*'):
            matches.append(os.path.join(root, dirname))

    # Remove all files, unless explicitly to be saved.
    for match in matches:

        # If called as part of a build process, these temporary directories
        # are required.
        if is_build:
            if ('.waf' in match) or ('.bld' in match):
                continue

        # Explicit treatment for files.
        if os.path.isfile(match):
            if ('.py' in match) or ('.f' in match) or ('.f90' in match):
                continue

            # Keep README files for GITHUB
            if '.md' in match:
                continue

            # Keep files for build process
            if (match == './waf') or (match == './wscript'):
                continue

            if match == './fortran/wscript':
                continue

            # Keep the initialization files for the regression tests.
            if 'test_' in match:
                continue

        else:

            if match == './fortran':
                continue

            if match == './python':
                continue

            if match == './python/py':
                continue

            if match == './python/f2py':
                continue

            if match == './tests':
                continue

            if match == './tests/codes':
                continue

            if match == './tests/resources':
                continue

        # Remove remaining files and directories.
        try:
            os.unlink(match)
        except Exception:
            try:
                shutil.rmtree(match)
            except Exception:
                pass
