#!/usr/bin/env python

# standard library
import fnmatch
import shutil
import glob
import sys
import os

top = '.'
out = '.bld'

# Check for Python 3
if not (sys.version_info[0] == 3):
    raise AssertionError('Please use Python 3')


def options(opt):

    opt.load('compiler_c')

    opt.load('compiler_fc')

    opt.add_option('--fast', action='store_true', dest='fast', default=False,
                   help='compile FORTRAN library')

    opt.add_option('--test', action='store_true', dest='test', default=False,
                   help='run test battery')

    opt.add_option('--debug', action='store_true', dest='debug', default=False,
                   help='use debug compiler options')


def configure(conf):

    # Distribute options
    fast = conf.options.fast

    # Construct environment variables
    conf.env.project_paths = dict()

    conf.env.project_paths['ROBUPY'] = os.getcwd()

    if fast:
        conf.load('compiler_fc')


def build(bld):

    # Distribute options
    fast = bld.options.fast

    test = bld.options.test

    # Start from a clean slate
    distclean(all_=False)

    if fast:

        bld.recurse('fortran')

    if test:

        os.chdir('tests')

        os.system('nosetests tests.py')


def distclean(all_=True):

    # Remove nuisance files
    remove_filetypes_distclean('.')

    # Remove compiled files
    for dir_ in ['lib', 'bin', 'include']:

        remove_for_distclean('fortran/' + dir_)

        # Special treatment for symbolic links
        try:
            os.unlink('python/f2py/' + dir_)
        except OSError:
            pass

    # Remove build system
    if all_:
        remove_for_distclean(glob.glob('.waf*'))
        remove_for_distclean('.bld')

    try:
        os.unlink('tests/test.robupy.ini')
    except OSError:
        pass

''' Auxiliary functions
'''


def remove_for_distclean(paths):
    """ Remove path, where path can be either a directory or a file. The
        appropriate function is selected. Note, however, that if an
        OSError occurs, the function will just path.
    """
    if not isinstance(paths, list):
        paths = [paths]

    for path in paths:

        if os.path.isdir(path):

            shutil.rmtree(path)

        if os.path.isfile(path):

            os.remove(path)


def remove_filetypes_distclean(path):
    """ Remove nuisance files from the directory tree.
    """
    matches = []

    for root, _, filenames in os.walk(path):

        for filetypes in ['*.aux','*.log','*.pyc', '*.so', '*~', '*tar',
                          '*.zip', '.waf*', '*lock*', '*.mod', '*.a',
                          '*.pkl', '*.out', '*.pyo', '*.info',
                          '__pycache__', '.coverage', '*.o']:

                for filename in fnmatch.filter(filenames, filetypes):

                    matches.append(os.path.join(root, filename))

    matches.append('.lock-wafbuild')

    for files in matches:

        remove_for_distclean(files)

    for dirName, _, _ in os.walk('.'):

        if '__pycache__' in dirName:
            shutil.rmtree(dirName)