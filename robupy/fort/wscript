#!/usr/bin/env python

# standard library
import fnmatch
import shutil
import os

def build(bld):

    bld(rule=pre_build)

    compiler_options = '-fbounds-check -Wunused -fPIC'

    files = ['fort_robupy_auxiliiary.f90']

    for file_ in files:

        bld.add_group()

        bld(features='fc', source=file_, fcflags=compiler_options)

    bld.add_group()

    bld(features='fc fcstlib', source=files, target='fort_robupy',
        fcflags=compiler_options)

    bld.add_group()

    bld(rule = post_build)

    bld.add_group()

    bld(rule = f2py_call)

''' Auxiliary functions.
'''
def pre_build(self):
    """ Create the include and library directory to store the library and
        compiled files if not yet present.
    """
    path = self.env.project_paths['ROBUPY']

    os.chdir(path + '/fort')

    for dir_ in ['include', 'lib']:

        try:

            os.makedirs(dir_)

        except OSError:

            pass

def post_build(self):
    """ Copy the resulting library from the build directory to the working
        directory.
    """
    project_root = self.env.project_paths['ROBUPY']

    mod_files = fnmatch.filter(os.listdir(project_root + '/.bld/'), '*.mod')

    target = 'include'

    for i in range(len(mod_files)):

        mod_files[i] = project_root + '/.bld/' + mod_files[i]

        shutil.copy(mod_files[i], target)

    source = project_root + '/.bld/fort/libfort_robupy.a'

    target = 'lib/'

    shutil.copy(source, target)

def f2py_call(self):
    """ Create the interface to f90_main using f2py.
    """
    os.system('f2py3 -c -m  fort_robupy_interface fort_robupy_interface.f90 -Iinclude -Llib -lfort_robupy')