#!/usr/bin/env python
""" This script solves and simulates the first RESTUD economy for a variety
of alternative degrees of ambiguity.
"""

# standard library
from multiprocessing import Pool

import numpy as np

import argparse
import shutil
import glob
import sys
import os

# PYTHONPATH
sys.path.insert(0, os.environ['ROBUPY'] + '/development/working/keane_economy/fort')
sys.path.insert(0, os.environ['ROBUPY'] + '/development/tests/random')
sys.path.insert(0, os.environ['ROBUPY'])

# Import function to that a fast version of the toolbox is available.
from robupy.tests.random_init import print_random_dict
from modules.auxiliary import compile_package
from robupy import *


''' Functions
'''


def distribute_arguments(parser):
    """ Distribute command line arguments.
    """
    # Process command line arguments
    args = parser.parse_args()

    # Extract arguments
    is_clean, is_create = args.is_clean, args.is_create

    # Check arguments
    assert (is_clean in [True, False])
    assert (is_create in [True, False])

    # Finishing
    return is_clean, is_create


def clean():
    """ Clean directory.
    """

    files = glob.glob('*')

    for file_ in files:

        if file_ in ['model.robupy.ini', 'run']:
            continue

        try:
            os.unlink(file_)
        except IsADirectoryError:
            shutil.rmtree(file_)


def solve_ambiguous_economy(level):
    """ Solve an economy in a subdirectory.
    """

    # Process baseline file
    robupy_obj = read('model.robupy.ini')

    init_dict = robupy_obj.get_attr('init_dict')

    # Create directory
    os.mkdir(str(level))

    # Solve
    os.chdir(str(level))

    # Update level of ambiguity
    init_dict['AMBIGUITY']['level'] = level

    # Write initialization file
    print_random_dict(init_dict)

    # Solve requested model
    robupy_obj = read('test.robupy.ini')

    solve(robupy_obj)

    # Finishing
    os.chdir('../')


def create():
    """ Solve the RESTUD economies for different levels of ambiguity.
    """
    # Compile fast version of ROBUPY package
    compile_package('fast')

    # Auxiliary objects
    grid = np.linspace(0.00, 1.0, num=21)

    # Cleanup
    clean()

    # Run multiple economies in parallel
    p = Pool(3)

    p.map(solve_ambiguous_economy, grid)


''' Execution of module as script.
'''
if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='Solve RESTUD economy for varying level of ambiguity.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--clean', action='store_true', dest='is_clean',
                        help='clean directory')

    parser.add_argument('--create', action='store_true', dest='is_create',
                        help='create results')

    is_clean, is_create = distribute_arguments(parser)

    # Run function
    if is_clean: clean()

    if is_create: create()
