#!/usr/bin/env python

""" This module is used for the development setup.
"""
# standard library
from pandas.util.testing import assert_frame_equal
import pandas as pd
import numpy as np
import sys
import os
import shutil

# project libra
# project library
import time
import sys
import os

sys.path.insert(0, os.environ['ROBUPY'])

# project library
from robupy import read, simulate
from robupy.python.solve_python import solve_python
from robupy.fortran.solve_fortran import solve_fortran
from robupy.tests.random_init import generate_random_dict, print_random_dict
# Relative Criterion
HOME = os.getcwd()


for _ in range(1):

    # Re-compile ROBUPY package
    #os.chdir('/home/peisenha/robustToolbox/package/robupy')

    #os.system('./waf distclean')

    #os.system('./waf configure build --fast')

    #os.chdir(HOME)

    # Run
#    os.system('robupy-solve --simulate')

    while True:

        constraints = dict()
        # THIS shoudl work with PYTHON as well?
        constraints['version'] = np.random.choice(['F2PY'])
        constraints['level'] = 0.00
        constraints['eps_level'] = True
        init_dict = generate_random_dict(constraints)

        num_agents = init_dict['SIMULATION']['agents']
        num_draws = init_dict['SOLUTION']['draws']
        if num_draws < num_agents:
            init_dict['SOLUTION']['draws'] = num_agents

        print_random_dict(init_dict)

        robupy_obj = read('test.robupy.ini')

        # FORTRAN
        print(' FORTRAN \n')
        solve_fortran(robupy_obj)

        # Compare the simulated datasets generated by the programs.
        shutil.move('data.robupy.dat', 'fort.robupy.dat')
        fort = pd.DataFrame(np.array(np.genfromtxt('fort.robupy.dat',
                missing_values='.'), ndmin=2)[:, -4:])

        # PYTHON
        print('\n\n PYTHON \n')
        robupy_obj = solve_python(robupy_obj)

        simulate(robupy_obj)

        py = pd.DataFrame(np.array(np.genfromtxt('data.robupy.dat',
                missing_values='.'), ndmin=2)[:, -4:])

        assert_frame_equal(py, fort)