#!/usr/bin/env python
""" This module implements some fixed tests.
"""

# project library
import numpy as np
import shutil
import glob
import sys
import os

# project library
sys.path.insert(0, os.environ['ROBUPY'])

# virtual environment
if not hasattr(sys, 'real_prefix'):
    raise AssertionError('Please use a virtual environment for testing')

from robupy import *

''' Auxiliary functions
'''
def compile_package(which):
    """ Compile toolbox
    """
    # Antibugging
    assert (which in ['fast', 'slow'])

    # Auxiliary objects
    package_dir = os.environ['ROBUPY'] + '/robupy'
    tests_dir = os.getcwd()

    # Compile package
    os.chdir(package_dir)

    os.system('./waf distclean > /dev/null 2>&1')

    cmd = './waf configure build'

    if which == 'fast':
        cmd += ' --fast'

    cmd += ' > /dev/null 2>&1'

    os.system(cmd)

    os.chdir(tests_dir)

def cleanup():
    """ Cleanup after test battery.
    '"""
    files = []

    files = files + glob.glob('*.pkl')

    files = files + glob.glob('*.txt')

    files = files + glob.glob('*.dat')

    files = files + glob.glob('*.info')

    files = files + glob.glob('*.log')

    for file_ in files:

        try:

            os.remove(file_)

        except OSError:

            pass

        try:

            shutil.rmtree(file_)

        except OSError:

            pass

def test_A():
    """ Tes solution of simple model against hard-coded results.
    """
    robupy_obj = read('first.robupy.ini')

    robupy_obj = solve(robupy_obj)

    simulate(robupy_obj)

    cleanup()

    # Assert unchanged value
    assert abs(robupy_obj.get_attr('emax')[0, :1] - 66323.48328365) < 0.00000001

def test_B():
    """ Compare the solution of simple model against hard-coded results.
    """
    robupy_obj = read('second.robupy.ini')

    robupy_obj = solve(robupy_obj)

    # Distribute class attributes
    emax = robupy_obj.get_attr('emax')

    ex_post = robupy_obj.get_attr('period_payoffs_ex_post')

    ex_ante = robupy_obj.get_attr('period_payoffs_ex_ante')

    states_all = robupy_obj.get_attr('states_all')

    # GENERAL: As there are no random disturbances, the ex ante and
    # ex post versions of the period payoffs should be identical.
    assert (np.ma.all(np.ma.masked_invalid(ex_post) == np.ma.masked_invalid(ex_ante)))

    # PERIOD 3: Check that all expected future values are equal
    # to zero.
    assert (np.all(emax[2,:]) == 0.00)

    # PERIOD 3: Check the ex ante payoffs against hand calculations.
    vals =  [[2.7456010000000000, 07.5383250000000000, -3999.60, 1.140]]
    vals += [[3.0343583944356758, 09.2073308658822519, -3999.60, 1.140]]
    vals += [[3.0343583944356758, 09.2073308658822519,  0000.90, 1.140]]
    vals += [[3.3534846500000000, 11.2458593100000000,  0000.40, 1.140]]
    vals += [[3.5966397255692826, 12.0612761204447200, -3999.60, 1.140]]
    vals += [[3.9749016274947495, 14.7316759204425760, -3999.60, 1.140]]
    vals += [[3.9749016274947495, 14.7316759204425760,  0000.90, 1.140]]
    vals += [[6.2338866585247175, 31.1869581683094590, -3999.60, 1.140]]
    vals += [[3.4556134647626764, 11.5883467192233920, -3999.60, 1.140]]
    vals += [[3.8190435053663370, 14.1540386453758080, -3999.60, 1.140]]
    vals += [[3.8190435053663370, 14.1540386453758080,  0000.90, 1.140]]
    vals += [[4.5267307943142532, 18.5412874597468690, -3999.60, 1.140]]
    vals += [[5.5289614776240041, 27.6603505585167470, -3999.60, 1.140]]
    for i, val in enumerate(vals):
        (np.testing.assert_allclose(ex_ante[2, i, :], val))

    # PERIOD 2: Check the ex ante payoffs against hand calculations.
    vals  = [[2.7456010150169163, 07.5383249336619222, -3999.60, 1.140]]
    vals += [[3.0343583944356758, 09.2073308658822519,  0000.90, 1.140]]
    vals += [[3.5966397255692826, 12.0612761204447200, -3999.60, 1.140]]
    vals += [[3.4556134647626764, 11.5883467192233920, -3999.60, 1.140]]
    for i, val in enumerate(vals):
        (np.testing.assert_allclose(ex_ante[1, i,:], val))

    # PERIOD 2: Check expected future values. As there are no
    # random disturbances, this corresponds to the maximum
    # value in the last period.
    vals = [7.53832493, 9.20733087, 12.0612761, 11.5883467]
    for i, val in enumerate(vals):
        (np.testing.assert_allclose(emax[1, i], val))

    # PERIOD 1: Check the ex ante payoffs against hand calculations.
    vals = [[2.7456010150169163, 7.5383249336619222, 0.90, 1.140]]
    for i, val in enumerate(vals):
        (np.testing.assert_allclose(ex_ante[0, i,:], val))

def test_C():
    """ THIRD: Check the simulation output for the special case.
    """
    robupy_obj = read('second.robupy.ini')

    robupy_obj = solve(robupy_obj)

    simulate(robupy_obj)

    cleanup()

def test_D():
    """ Test the solution of model with ambiguity against hard coded results
    to detect unwanted deviations.
    """
    # Relative Criterion
    robupy_obj = read('third.robupy.ini')

    robupy_obj = solve(robupy_obj)

    simulate(robupy_obj)

    cleanup()

    # Assert unchanged value
    assert abs(robupy_obj.get_attr('emax')[0, :1] - 48577.7790991) < 0.00000001

    # Absolute Criterion
    robupy_obj = read('fourth.robupy.ini')

    robupy_obj = solve(robupy_obj)

    simulate(robupy_obj)

    cleanup()

    # Assert unchanged value
    assert abs(robupy_obj.get_attr('emax')[0, :1] - 18.07006519) < 0.00000001


def test_E():
    """ Test FORTRAN implementation of selected functions.
    """

    compile_package('fast')

    # Imports
    import robupy.performance.fortran.fortran_functions as fort

    # Draw random matrix for testing purposes
    matrix = (np.random.multivariate_normal(np.zeros(4), np.identity(4), 4))
    cov = np.dot(matrix, matrix.T)

    # Inverse
    for _ in range(1000):

        py = np.linalg.inv(cov)
        f90 = fort.inverse(cov, 4)

        np.testing.assert_allclose(py, f90, rtol=1e-06)

    # Determinant
    for _ in range(1000):

        py = np.linalg.det(cov)
        f90 = fort.determinant(cov)

        np.testing.assert_allclose(py, f90, rtol=1e-06)

    # Trace
    for _ in range(1000):

        py = np.trace(cov)
        f90 = fort.trace(cov)

        np.testing.assert_allclose(py, f90, rtol=1e-06)

''' Main
'''
np.random.seed(4536)

#test_A()

#test_B()

test_C() #unaffected

#test_D()

#test_E() unaffected