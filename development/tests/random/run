#!/usr/bin/env python
""" Script to start development test battery for the ROBUPY package.
"""

# standard library
from datetime import timedelta
from datetime import datetime

import numpy as np

import argparse
import logging
import random
import sys
import os

# project library
from modules._auxiliary import *
import modules._tests as lib

# virtual environment
if not hasattr(sys, 'real_prefix'):
    raise AssertionError('Please use a virtual environment for testing')

''' Main Function.
'''


def run(hours):
    """ Run test battery.
    """

    start, timeout = datetime.now(), timedelta(hours=hours)

    labels = ['A', 'B', 'C', 'D']

    # Initialize counter.
    dict_ = dict()

    for label in labels:

        dict_[label] = dict()

        dict_[label]['success'] = 0

        dict_[label]['failure'] = 0

    # Logging.
    logger = logging.getLogger('DEV-TEST')

    msg = 'Initialization of a ' + str(hours) + ' hours testing run.'

    logger.info(msg)

    # # Evaluation loop.
    while True:

        # Setup of test case.
        label = np.random.choice(labels)

        test = getattr(lib, 'test_' + label)

        # Set seed.
        seed = random.randrange(1, 100000)

        np.random.seed(seed)

        try:

            test()

            dict_[label]['success'] += 1

        except:

            dict_[label]['failure'] += 1

            msg = 'Failure for test ' + label + ' with seed ' + str(seed)

            logger.info(msg)

        # Cleaning up after test
        cleanup()

        # Timeout.
        current = datetime.now()

        duration = current - start

        if timeout < duration:
            break

    # Finishing.
    return dict_


''' Execution of module as script.
'''
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Run development test '
        'battery of ROBUPY package.', formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--hours', action='store', dest='hours',
                        type=float, default=1.0, help='run time in hours')

    parser.add_argument('--notification', action = 'store_true', \
                        dest = 'notification', default = False, \
                        help = 'send notification')

    hours, notification = distribute_input(parser)

    start_logging()

    cleanup()

    dict_ = run(hours)

    finish(dict_, hours, notification)
