#!/usr/bin/env python
""" Script to start development test battery for the ROBUPY package.

    TODO: The testing routine does not account for problems in the
    optimization of the ambiguity step.

"""

# standard library
from datetime import timedelta
from datetime import datetime

import numpy as np

import argparse
import logging
import random
import sys
import os

# project
from modules.auxiliary import compile_package
from modules.auxiliary import distribute_input
from modules.auxiliary import start_logging
from modules.auxiliary import cleanup
from modules.auxiliary import finish

import modules.battery as development_tests

# ROBUPY import
sys.path.insert(0, os.environ['ROBUPY'])
from robupy.tests.tests import Tests as package_tests

# virtual environment
if not hasattr(sys, 'real_prefix'):
    raise AssertionError('Please use a virtual environment for testing')

''' Main Function.
'''


def run(hours):
    """ Run test battery.
    """

    start, timeout = datetime.now(), timedelta(hours=hours)

    package_labels = ['1', '2', '3', '4', '5', '6', '7']

    development_labels = ['94', '95', '96', '97', '98', '99']

    labels = package_labels + development_labels

    # Initialize counter.
    dict_ = dict()

    for label in labels:

        dict_[label] = dict()

        dict_[label]['success'] = 0

        dict_[label]['failure'] = 0

    # Logging.
    logger = logging.getLogger('DEV-TEST')

    msg = 'Initialization of a ' + str(hours) + ' hours testing run.'

    logger.info(msg)

    # Compile package. I also test the equality of results between the fast
    # and slow compilation in Test H.
    compile_package('fast')

    # # Evaluation loop.
    while True:

        # Setup of test case.
        label = np.random.choice(labels)
        if label in development_labels:
            test = getattr(development_tests, 'test_' + label)
        else:
            test = getattr(package_tests, 'test_' + label)

        # Set seed.
        seed = random.randrange(1, 100000)

        np.random.seed(seed)

        try:

            test()

            dict_[label]['success'] += 1

        except Exception:

            dict_[label]['failure'] += 1

            msg = 'Failure for test ' + label + ' with seed ' + str(seed)

            logger.info(msg)

        # Cleaning up after test
        cleanup()

        # Timeout.
        current = datetime.now()

        duration = current - start

        if timeout < duration:
            break

    # Finishing.
    return dict_


''' Execution of module as script.
'''
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run development test '
                                                 'battery of ROBUPY package.',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--hours', action='store', dest='hours',
                        type=float, default=1.0, help='run time in hours')

    parser.add_argument('--notification', action='store_true',
                        dest='notification', default=False,
                        help='send notification')

    hours, notification = distribute_input(parser)

    start_logging()

    cleanup()

    dict_ = run(hours)

    finish(dict_, hours, notification)
