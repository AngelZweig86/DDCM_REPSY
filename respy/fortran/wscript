#!/usr/bin/env python

# standard library
import shutil
import glob
import os

# WAF system
from waflib.Task import Task

''' Task Generators
'''


class CreateDirectoryStructure(Task):

    def run(self):

        os.chdir(self.env.project_paths['ROBUPY'] + '/fortran')

        for dir_ in ['include', 'lib', 'bin']:
            try:
                os.makedirs(dir_)
            except OSError:
                pass

            try:
                os.remove(dir_)
            except OSError:
                pass


class CreateRobufortLibrary(Task):

    def run(self):

        compiler_options = self.env.compiler_options + ' -fpic'

        files = ['shared/shared_constants.f90', 'shared/shared_auxiliary.f90',
                'resfort_slsqp.f',
                'solve/solve_auxiliary.f90', 'solve/solve_fortran.f90',
                'evaluate/evaluate_auxiliary.f90',
                'evaluate/evaluate_fortran.f90',
                'estimate/estimate_auxiliary.f90',
                'simulate/simulate_fortran.f90']

        for file_ in files:
            os.system('gfortran ' + compiler_options + ' -c ' + file_)

        os.system('ar crs libfort_resfort.a *.o *.mod')

        os.chdir(self.env.project_paths['ROBUPY'] + '/fortran')

        module_files = glob.glob('*.mod')
        for file_ in module_files:
            shutil.move(file_, 'include/')

        shutil.move('libfort_resfort.a', 'lib/')


class CreateRobufortExecutable(Task):

    def run(self):

        from fortran.build_resfort import resfort_build

        resfort_build(self)


class CreateF2pyInterfaces(Task):

    def run(self):

        os.chdir(self.env.project_paths['ROBUPY'] + '/fortran')

        os.system(
            'f2py3 -c -m  f2py_library f2py_interface_library.f90 '
            '-Iinclude -Llib -lfort_resfort -L/usr/lib/lapack -llapack')

        os.system(
            'f2py3 -c -m  f2py_debug f2py_interface_debug.f90 '
            '-Iinclude -Llib -lfort_resfort -L/usr/lib/lapack -llapack')


class CreateKeaneWolpinExecutables(Task):

    def run(self):

        current_directory = os.getcwd()
        package_directory = self.env.project_paths['ROBUPY']
        compiler_options = self.env.compiler_options
        os.chdir(package_directory + '/fortran/miscellaneous/kw_recomputation')

        cmd = ' kw_shared_constants.f90 kw_imsl_replacements.f90 ' \
              'kw_test_additions.f90 kw_dp3asim.f90 ' \
              ' -L/usr/lib/lapack -llapack'

        os.system(' gfortran ' + compiler_options + ' -o kw_dp3asim ' + cmd)
        shutil.move('kw_dp3asim', '../../bin/')
        os.chdir(current_directory)

''' Build
'''


def build(bld):

    # Distribute class attributes
    is_debug = bld.options.is_debug

    # Initialize directory structure
    task_1 = CreateDirectoryStructure(env=bld.env)

    bld.add_to_group(task_1)

    # Create the ROBUFORT library. This is build in addition to the ROBUFORT
    # executable to allow for the use of an F2PY interface to the core
    # functions as well.
    task_2 = CreateRobufortLibrary(env=bld.env)

    bld.add_to_group(task_2)

    task_2.set_run_after(task_1)

    # Create the ROBUFORT executable
    task_3 = CreateRobufortExecutable(env=bld.env)

    task_3.is_debug = is_debug

    bld.add_to_group(task_3)

    task_3.set_run_after(task_2)

    # Build F2PY interface
    task_4 = CreateF2pyInterfaces(env=bld.env)

    bld.add_to_group(task_4)

    task_4.set_run_after(task_3)

    # Create the executables for the Keane & Wolpin (1994) comparisons.
    task_5 = CreateKeaneWolpinExecutables(env=bld.env)

    bld.add_to_group(task_5)

    task_5.set_run_after(task_4)
