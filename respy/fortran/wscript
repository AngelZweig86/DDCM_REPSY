#!/usr/bin/env python

# standard library
import os

# WAF system
from waflib.Task import Task


class CreateF2pyInterfaces(Task):

    def run(self):

        os.chdir('fortran')

        from numpy import f2py
        extra_args = '--f90flags="-ffree-line-length-0" -I../.bld -L../.bld/fortran -lresfort ' \
                     '-llapack'

        with open('f2py_interface_library.f90', 'rb') as sourcefile:
            sourcecode = sourcefile.read()
        f2py.compile(sourcecode, 'f2py_library', extra_args, extension='.f90')

        with open('f2py_interface_debug.f90', 'rb') as sourcefile:
            sourcecode = sourcefile.read()
        f2py.compile(sourcecode, 'f2py_debug', extra_args, extension='.f90')

        os.chdir('../')


class CreateParallelExecutable(Task):

    def run(self):

        cwd = os.getcwd()
        os.chdir('/home/peisenha/restudToolbox/package/respy/fortran')

        # # TODO: Major improvements required.
        lib_dir = '/home/peisenha/restudToolbox/package/respy/.bld/fortran'
        inc_dir = '/home/peisenha/restudToolbox/package/respy/.bld'
        DEBUG_OPTIONS = ['-O2', '-Wall', '-Wline-truncation',
             '-Wcharacter-truncation']
        DEBUG_OPTIONS += ['-Wsurprising', '-Waliasing', '-Wimplicit-interface']
        DEBUG_OPTIONS += ['-Wunused-parameter', '-fwhole-file', '-fcheck=all']
        DEBUG_OPTIONS += ['-fbacktrace', '-g', '-fmax-errors=1',
             '-ffpe-trap=invalid', '-ffree-line-length-0']
        #
        # # DEBUG_OPTIONS = []
        # #
        cmd = 'mpif90 parallel_auxiliary.f90 parallel_master.f90 ' + '-o ' \
                                                   'resfort_parallel_master ' + \
              ' '.join(
                 DEBUG_OPTIONS) + ' -I' + inc_dir + ' -L' + lib_dir + ' ' \
                                                                      '-lresfort ' \
                                                                      '-llapack '
        assert os.system(cmd) == 0

        cmd = 'mpif90 parallel_slave.f90 ' + '-o resfort_parallel_slave ' +\
              ' '.join(
            DEBUG_OPTIONS) + ' -I' + inc_dir + ' -L' + lib_dir + ' ' \
                                                                 '-lresfort ' \
                                                                 '-llapack '

        assert os.system(cmd) == 0


        # TODO: WHat is the best way to reactive this idea? Mave mpi4yp
        # # This compiles the testing
        # # Compile testing file.
        # import shutil
        # os.chdir('miscellaneous/testing')
        # shutil.copy('../../parallel_auxiliary.f90', '.')
        #
        # cmd = 'mpif90  ../../parallel_auxiliary.f90 testing_scalar_parallel.f90  ' \
        #       + '-o testing_parallel_scalar ' + ' '.join(
        #     DEBUG_OPTIONS) + ' -I' + inc_dir + ' -L' + lib_dir + ' -lresfort ' \
        #                                                          '-llapack '
        #
        # os.system(cmd)
        # assert os.system(cmd) == 0


        os.chdir(cwd)


def build(ctx):

    # Create the RESFORT library. This is build in addition to the RESFORT
    # executable to allow for the use of an F2PY interface to the core
    # functions as well.
    src = ['shared/shared_constants.f90', 'shared/shared_auxiliary.f90',
        'solve/solve_auxiliary.f90', 'solve/solve_fortran.f90',
        'evaluate/evaluate_auxiliary.f90', 'evaluate/evaluate_fortran.f90',
        'estimate/estimate_auxiliary.f90', 'simulate/simulate_fortran.f90',
        'resfort_library.f90']

    flags = ctx.env.FCFLAGS + ['-fPIC']
    ctx(features=['fc', 'fcstlib'], source=src, target='resfort', fcflags=flags)

    ctx.add_group()

    # Build F2PY interface
    ctx.add_to_group(CreateF2pyInterfaces(env=ctx.env))

    # Compile scalar RESFORT executable.
    ctx(features=['fc', 'fcprogram'], source='scalar.f90',
        target='resfort_scalar')

    # Compile the parallel RESFORT executables.
    ctx.add_to_group(CreateParallelExecutable(env=ctx.env))

    # Build the upgraded Keane and Wolpin (1994) program
    ctx.recurse('miscellaneous/kw_recomputation')

