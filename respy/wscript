#!/usr/bin/env python

# standard library
import shutil
import glob
import os

top = '.'
out = '.bld'

# Set of compiler options.
DEBUG_OPTIONS = ['-O2', '-Wall', '-Wline-truncation', '-Wcharacter-truncation']
DEBUG_OPTIONS += ['-Wsurprising', '-Waliasing', '-Wimplicit-interface']
DEBUG_OPTIONS += ['-Wunused-parameter', '-fwhole-file', '-fcheck=all']
DEBUG_OPTIONS += ['-fbacktrace', '-g', '-fmax-errors=1', '-ffpe-trap=invalid']
DEBUG_OPTIONS += ['-ffree-line-length-0']

PRODUCTION_OPTIONS = ['-O3', '-ffree-line-length-0']


def options(ctx):

    ctx.load('compiler_c')

    ctx.load('compiler_fc')

    ctx.add_option('--debug', action='store_true', dest='is_debug',
                   default=False, help='use debug compiler options')

    ctx.add_option('--without_mpi', action='store_true', dest='without_mpi',
        default=False, help='without parallelism')

def configure(ctx):

    ctx.load('compiler_fc')
    ctx.check_fortran()

    ctx.check_fc(msg='Checking for LAPACK library (required)', lib='lapack',
        mandatory=True)

    # Check for MPI compiler. If present, we will simply replace the compiler
    #  abd build the parallel implementation as well.
    ctx.env['PARALLELISM'] = True
    try:
        ctx.find_program('mpifort')
        ctx.env['FC'] = 'mpifort'
        ctx.env['COMPILER_FORTRAN'] = 'mpifort'
    except ctx.errors.ConfigurationError:
        ctx.env['PARALLELISM'] = False

    # User explicitly requested omitting the parallel implementation.
    if ctx.options.without_mpi:
        ctx.env['PARALLELISM'] = False


def build(ctx):

    is_debug = ctx.options.is_debug

    # The build is currently only tested for gfortran.
    if ctx.env.FC_NAME == 'GFORTRAN':
        if is_debug:
            ctx.env.append_unique('FCFLAGS', DEBUG_OPTIONS)
        else:
            ctx.env.append_unique('FCFLAGS', PRODUCTION_OPTIONS)

        # Enable static libraries
        ctx.env.append_unique('STLIBPATH', ['../.bld/fortran'])
        ctx.env.append_unique('STLIB', ['resfort'])

        # Enable shared libraries
        ctx.env.append_unique('LIB', ['lapack'])

    else:
        raise AssertionError('The build is only tested for GFORTRAN at this '
                             'point.')

    # Initialize directory structure
    ctx.recurse('fortran')

    ctx.add_post_fun(post)


def post(ctx):
    """ This function performs some housekeeping tasks. We keep all the
    executables in a single directory.
    """
    # Create subdirectory for FORTRAN executables
    subdir = 'fortran/bin'
    if os.path.exists(subdir):
        shutil.rmtree(subdir)

    # Copy the RESFORT executable back to package directory
    os.mkdir(subdir)
    shutil.copy('.bld/fortran/resfort_scalar', subdir)

    if ctx.env['PARALLELISM']:
        shutil.copy('.bld/fortran/resfort_parallel_master', subdir)
        shutil.copy('.bld/fortran/resfort_parallel_slave', subdir)

    # Copy the KW executable.
    src = '.bld/fortran/miscellaneous/kw_recomputation/kw_dp3asim'
    shutil.copy(src, subdir)
