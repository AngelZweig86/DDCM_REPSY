#!/usr/bin/env python

# standard library
import shutil
import os

top = '.'
out = '.bld'

# Set of compiler options.
DEBUG_OPTIONS = ['-O2', '-Wall', '-Wline-truncation', '-Wcharacter-truncation']
DEBUG_OPTIONS += ['-Wsurprising', '-Waliasing', '-Wimplicit-interface']
DEBUG_OPTIONS += ['-Wunused-parameter', '-fwhole-file', '-fcheck=all']
DEBUG_OPTIONS += ['-fbacktrace', '-g', '-fmax-errors=1', '-ffpe-trap=invalid']

PRODUCTION_OPTIONS = ['-O3']


def options(ctx):

    ctx.load('compiler_c')

    ctx.load('compiler_fc')

    ctx.add_option('--debug', action='store_true', dest='is_debug',
                   default=False, help='use debug compiler options')


def configure(ctx):

    ctx.load('compiler_fc')
    ctx.check_fortran()


def build(ctx):

    is_debug = ctx.options.is_debug

    # The build is currently only tested for gfortran.
    if ctx.env.FC_NAME == 'GFORTRAN':
        if is_debug:
            ctx.env.append_unique('FCFLAGS', DEBUG_OPTIONS)
        else:
            ctx.env.append_unique('FCFLAGS', PRODUCTION_OPTIONS)

        # Enable static libraries
        ctx.env.append_unique('STLIBPATH', ['../.bld/fortran'])
        ctx.env.append_unique('STLIB', ['resfort'])

        # Enable shared libraries
        ctx.env.append_unique('LIB', ['lapack'])

    else:
        raise AssertionError('The build is only tested for GFORTRAN at this '
                             'point.')

    # Initialize directory structure
    ctx.recurse('fortran')

    ctx.add_post_fun(post)


def distclean(ctx):
    """ Cleanup build
    """
    # Remove build
    try:
        shutil.rmtree('.bld')
    except OSError:
        pass

    # Remove libraries and executables
    try:
        shutil.rmtree('fortran/bin')
    except OSError:
        pass

    for fname in ['f2py_debug.so', 'f2py_library.so']:
        try:
            os.unlink('fortran/' + fname)
        except OSError:
            pass

    for fname in ['resfort_parallel_master', 'resfort_parallel_slave']:
        try:
            os.unlink('fortran/' + fname)
        except OSError:
            pass


def post(ctx):
    """ This function performs some housekeeping tasks
    """
    # Create subdirectory for FORTRAN executables
    subdir = 'fortran/bin'
    if os.path.exists(subdir):
        shutil.rmtree(subdir)

    # Copy the RESFORT executables back to package directory
    os.mkdir(subdir)
    shutil.copy('.bld/fortran/resfort_scalar', subdir)

    shutil.copy('fortran/miscellaneous/testing/testing_parallel_scalar', subdir)

    try:
        shutil.copy('fortran/resfort_parallel_master', subdir)
        shutil.copy('fortran/resfort_parallel_slave', subdir)
    except:
        pass

    # Copy the KW executable.
    src = '.bld/fortran/miscellaneous/kw_recomputation/kw_dp3asim'
    shutil.copy(src, subdir)

